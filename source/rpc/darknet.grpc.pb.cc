// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: darknet.proto

#include "darknet.pb.h"
#include "darknet.grpc.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/channel_interface.h>
#include <grpc++/impl/codegen/client_unary_call.h>
#include <grpc++/impl/codegen/method_handler_impl.h>
#include <grpc++/impl/codegen/rpc_service_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/sync_stream.h>
namespace darknet {

static const char* DetectRpc_method_names[] = {
  "/darknet.DetectRpc/Detect",
};

std::unique_ptr< DetectRpc::Stub> DetectRpc::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  std::unique_ptr< DetectRpc::Stub> stub(new DetectRpc::Stub(channel));
  return stub;
}

DetectRpc::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_Detect_(DetectRpc_method_names[0], ::grpc::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status DetectRpc::Stub::Detect(::grpc::ClientContext* context, const ::darknet::DetectRequest& request, ::darknet::DetectResponse* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_Detect_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::darknet::DetectResponse>* DetectRpc::Stub::AsyncDetectRaw(::grpc::ClientContext* context, const ::darknet::DetectRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::darknet::DetectResponse>::Create(channel_.get(), cq, rpcmethod_Detect_, context, request);
}

DetectRpc::Service::Service() {
  AddMethod(new ::grpc::RpcServiceMethod(
      DetectRpc_method_names[0],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< DetectRpc::Service, ::darknet::DetectRequest, ::darknet::DetectResponse>(
          std::mem_fn(&DetectRpc::Service::Detect), this)));
}

DetectRpc::Service::~Service() {
}

::grpc::Status DetectRpc::Service::Detect(::grpc::ServerContext* context, const ::darknet::DetectRequest* request, ::darknet::DetectResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace darknet

