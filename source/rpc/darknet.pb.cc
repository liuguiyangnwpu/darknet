// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: darknet.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "darknet.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace darknet {
class TargetRectDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<TargetRect>
     _instance;
} _TargetRect_default_instance_;
class DetectRequestDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DetectRequest>
     _instance;
} _DetectRequest_default_instance_;
class DetectResponseDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DetectResponse>
     _instance;
} _DetectResponse_default_instance_;

namespace protobuf_darknet_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[3];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TargetRect, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TargetRect, x_min_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TargetRect, y_min_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TargetRect, x_max_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TargetRect, y_max_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TargetRect, label_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TargetRect, prob_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectRequest, req_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectRequest, video_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectRequest, frame_name_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectResponse, rsp_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectResponse, spend_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectResponse, status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectResponse, err_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectResponse, targetlist_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(TargetRect)},
  { 11, -1, sizeof(DetectRequest)},
  { 19, -1, sizeof(DetectResponse)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_TargetRect_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DetectRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DetectResponse_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "darknet.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 3);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _TargetRect_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_TargetRect_default_instance_);_DetectRequest_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DetectRequest_default_instance_);_DetectResponse_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DetectResponse_default_instance_);}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\rdarknet.proto\022\007darknet\"e\n\nTargetRect\022\r"
      "\n\005x_min\030\001 \001(\005\022\r\n\005y_min\030\002 \001(\005\022\r\n\005x_max\030\003 "
      "\001(\005\022\r\n\005y_max\030\004 \001(\005\022\r\n\005label\030\005 \001(\t\022\014\n\004pro"
      "b\030\006 \001(\002\"G\n\rDetectRequest\022\016\n\006req_id\030\001 \001(\t"
      "\022\022\n\nvideo_name\030\002 \001(\t\022\022\n\nframe_name\030\003 \001(\t"
      "\"z\n\016DetectResponse\022\016\n\006rsp_id\030\001 \001(\t\022\022\n\nsp"
      "end_time\030\002 \001(\002\022\016\n\006status\030\003 \001(\010\022\013\n\003err\030\004 "
      "\001(\t\022\'\n\ntargetlist\030\005 \003(\0132\023.darknet.Target"
      "Rect2H\n\tDetectRpc\022;\n\006Detect\022\026.darknet.De"
      "tectRequest\032\027.darknet.DetectResponse\"\000b\006"
      "proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 406);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "darknet.proto", &protobuf_RegisterTypes);
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_darknet_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TargetRect::kXMinFieldNumber;
const int TargetRect::kYMinFieldNumber;
const int TargetRect::kXMaxFieldNumber;
const int TargetRect::kYMaxFieldNumber;
const int TargetRect::kLabelFieldNumber;
const int TargetRect::kProbFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TargetRect::TargetRect()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_darknet_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:darknet.TargetRect)
}
TargetRect::TargetRect(const TargetRect& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  label_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.label().size() > 0) {
    label_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.label_);
  }
  ::memcpy(&x_min_, &from.x_min_,
    static_cast<size_t>(reinterpret_cast<char*>(&prob_) -
    reinterpret_cast<char*>(&x_min_)) + sizeof(prob_));
  // @@protoc_insertion_point(copy_constructor:darknet.TargetRect)
}

void TargetRect::SharedCtor() {
  label_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&x_min_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&prob_) -
      reinterpret_cast<char*>(&x_min_)) + sizeof(prob_));
  _cached_size_ = 0;
}

TargetRect::~TargetRect() {
  // @@protoc_insertion_point(destructor:darknet.TargetRect)
  SharedDtor();
}

void TargetRect::SharedDtor() {
  label_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TargetRect::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TargetRect::descriptor() {
  protobuf_darknet_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_darknet_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TargetRect& TargetRect::default_instance() {
  protobuf_darknet_2eproto::InitDefaults();
  return *internal_default_instance();
}

TargetRect* TargetRect::New(::google::protobuf::Arena* arena) const {
  TargetRect* n = new TargetRect;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TargetRect::Clear() {
// @@protoc_insertion_point(message_clear_start:darknet.TargetRect)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  label_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&x_min_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&prob_) -
      reinterpret_cast<char*>(&x_min_)) + sizeof(prob_));
  _internal_metadata_.Clear();
}

bool TargetRect::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:darknet.TargetRect)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 x_min = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_min_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 y_min = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y_min_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 x_max = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_max_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 y_max = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y_max_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string label = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_label()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->label().data(), static_cast<int>(this->label().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "darknet.TargetRect.label"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float prob = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u /* 53 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &prob_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:darknet.TargetRect)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:darknet.TargetRect)
  return false;
#undef DO_
}

void TargetRect::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:darknet.TargetRect)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 x_min = 1;
  if (this->x_min() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->x_min(), output);
  }

  // int32 y_min = 2;
  if (this->y_min() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->y_min(), output);
  }

  // int32 x_max = 3;
  if (this->x_max() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->x_max(), output);
  }

  // int32 y_max = 4;
  if (this->y_max() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->y_max(), output);
  }

  // string label = 5;
  if (this->label().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->label().data(), static_cast<int>(this->label().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "darknet.TargetRect.label");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->label(), output);
  }

  // float prob = 6;
  if (this->prob() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->prob(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:darknet.TargetRect)
}

::google::protobuf::uint8* TargetRect::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:darknet.TargetRect)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 x_min = 1;
  if (this->x_min() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->x_min(), target);
  }

  // int32 y_min = 2;
  if (this->y_min() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->y_min(), target);
  }

  // int32 x_max = 3;
  if (this->x_max() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->x_max(), target);
  }

  // int32 y_max = 4;
  if (this->y_max() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->y_max(), target);
  }

  // string label = 5;
  if (this->label().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->label().data(), static_cast<int>(this->label().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "darknet.TargetRect.label");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->label(), target);
  }

  // float prob = 6;
  if (this->prob() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->prob(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:darknet.TargetRect)
  return target;
}

size_t TargetRect::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:darknet.TargetRect)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string label = 5;
  if (this->label().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->label());
  }

  // int32 x_min = 1;
  if (this->x_min() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->x_min());
  }

  // int32 y_min = 2;
  if (this->y_min() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->y_min());
  }

  // int32 x_max = 3;
  if (this->x_max() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->x_max());
  }

  // int32 y_max = 4;
  if (this->y_max() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->y_max());
  }

  // float prob = 6;
  if (this->prob() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TargetRect::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:darknet.TargetRect)
  GOOGLE_DCHECK_NE(&from, this);
  const TargetRect* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TargetRect>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:darknet.TargetRect)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:darknet.TargetRect)
    MergeFrom(*source);
  }
}

void TargetRect::MergeFrom(const TargetRect& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:darknet.TargetRect)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.label().size() > 0) {

    label_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.label_);
  }
  if (from.x_min() != 0) {
    set_x_min(from.x_min());
  }
  if (from.y_min() != 0) {
    set_y_min(from.y_min());
  }
  if (from.x_max() != 0) {
    set_x_max(from.x_max());
  }
  if (from.y_max() != 0) {
    set_y_max(from.y_max());
  }
  if (from.prob() != 0) {
    set_prob(from.prob());
  }
}

void TargetRect::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:darknet.TargetRect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TargetRect::CopyFrom(const TargetRect& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:darknet.TargetRect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TargetRect::IsInitialized() const {
  return true;
}

void TargetRect::Swap(TargetRect* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TargetRect::InternalSwap(TargetRect* other) {
  using std::swap;
  label_.Swap(&other->label_);
  swap(x_min_, other->x_min_);
  swap(y_min_, other->y_min_);
  swap(x_max_, other->x_max_);
  swap(y_max_, other->y_max_);
  swap(prob_, other->prob_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TargetRect::GetMetadata() const {
  protobuf_darknet_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_darknet_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TargetRect

// int32 x_min = 1;
void TargetRect::clear_x_min() {
  x_min_ = 0;
}
::google::protobuf::int32 TargetRect::x_min() const {
  // @@protoc_insertion_point(field_get:darknet.TargetRect.x_min)
  return x_min_;
}
void TargetRect::set_x_min(::google::protobuf::int32 value) {
  
  x_min_ = value;
  // @@protoc_insertion_point(field_set:darknet.TargetRect.x_min)
}

// int32 y_min = 2;
void TargetRect::clear_y_min() {
  y_min_ = 0;
}
::google::protobuf::int32 TargetRect::y_min() const {
  // @@protoc_insertion_point(field_get:darknet.TargetRect.y_min)
  return y_min_;
}
void TargetRect::set_y_min(::google::protobuf::int32 value) {
  
  y_min_ = value;
  // @@protoc_insertion_point(field_set:darknet.TargetRect.y_min)
}

// int32 x_max = 3;
void TargetRect::clear_x_max() {
  x_max_ = 0;
}
::google::protobuf::int32 TargetRect::x_max() const {
  // @@protoc_insertion_point(field_get:darknet.TargetRect.x_max)
  return x_max_;
}
void TargetRect::set_x_max(::google::protobuf::int32 value) {
  
  x_max_ = value;
  // @@protoc_insertion_point(field_set:darknet.TargetRect.x_max)
}

// int32 y_max = 4;
void TargetRect::clear_y_max() {
  y_max_ = 0;
}
::google::protobuf::int32 TargetRect::y_max() const {
  // @@protoc_insertion_point(field_get:darknet.TargetRect.y_max)
  return y_max_;
}
void TargetRect::set_y_max(::google::protobuf::int32 value) {
  
  y_max_ = value;
  // @@protoc_insertion_point(field_set:darknet.TargetRect.y_max)
}

// string label = 5;
void TargetRect::clear_label() {
  label_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TargetRect::label() const {
  // @@protoc_insertion_point(field_get:darknet.TargetRect.label)
  return label_.GetNoArena();
}
void TargetRect::set_label(const ::std::string& value) {
  
  label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:darknet.TargetRect.label)
}
#if LANG_CXX11
void TargetRect::set_label(::std::string&& value) {
  
  label_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:darknet.TargetRect.label)
}
#endif
void TargetRect::set_label(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:darknet.TargetRect.label)
}
void TargetRect::set_label(const char* value, size_t size) {
  
  label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:darknet.TargetRect.label)
}
::std::string* TargetRect::mutable_label() {
  
  // @@protoc_insertion_point(field_mutable:darknet.TargetRect.label)
  return label_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TargetRect::release_label() {
  // @@protoc_insertion_point(field_release:darknet.TargetRect.label)
  
  return label_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TargetRect::set_allocated_label(::std::string* label) {
  if (label != NULL) {
    
  } else {
    
  }
  label_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), label);
  // @@protoc_insertion_point(field_set_allocated:darknet.TargetRect.label)
}

// float prob = 6;
void TargetRect::clear_prob() {
  prob_ = 0;
}
float TargetRect::prob() const {
  // @@protoc_insertion_point(field_get:darknet.TargetRect.prob)
  return prob_;
}
void TargetRect::set_prob(float value) {
  
  prob_ = value;
  // @@protoc_insertion_point(field_set:darknet.TargetRect.prob)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DetectRequest::kReqIdFieldNumber;
const int DetectRequest::kVideoNameFieldNumber;
const int DetectRequest::kFrameNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DetectRequest::DetectRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_darknet_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:darknet.DetectRequest)
}
DetectRequest::DetectRequest(const DetectRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  req_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.req_id().size() > 0) {
    req_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.req_id_);
  }
  video_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.video_name().size() > 0) {
    video_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.video_name_);
  }
  frame_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.frame_name().size() > 0) {
    frame_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.frame_name_);
  }
  // @@protoc_insertion_point(copy_constructor:darknet.DetectRequest)
}

void DetectRequest::SharedCtor() {
  req_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  video_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  frame_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

DetectRequest::~DetectRequest() {
  // @@protoc_insertion_point(destructor:darknet.DetectRequest)
  SharedDtor();
}

void DetectRequest::SharedDtor() {
  req_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  video_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  frame_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DetectRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DetectRequest::descriptor() {
  protobuf_darknet_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_darknet_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DetectRequest& DetectRequest::default_instance() {
  protobuf_darknet_2eproto::InitDefaults();
  return *internal_default_instance();
}

DetectRequest* DetectRequest::New(::google::protobuf::Arena* arena) const {
  DetectRequest* n = new DetectRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DetectRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:darknet.DetectRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  req_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  video_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  frame_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool DetectRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:darknet.DetectRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string req_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_req_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->req_id().data(), static_cast<int>(this->req_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "darknet.DetectRequest.req_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string video_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_video_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->video_name().data(), static_cast<int>(this->video_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "darknet.DetectRequest.video_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string frame_name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_frame_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->frame_name().data(), static_cast<int>(this->frame_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "darknet.DetectRequest.frame_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:darknet.DetectRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:darknet.DetectRequest)
  return false;
#undef DO_
}

void DetectRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:darknet.DetectRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string req_id = 1;
  if (this->req_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->req_id().data(), static_cast<int>(this->req_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "darknet.DetectRequest.req_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->req_id(), output);
  }

  // string video_name = 2;
  if (this->video_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->video_name().data(), static_cast<int>(this->video_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "darknet.DetectRequest.video_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->video_name(), output);
  }

  // string frame_name = 3;
  if (this->frame_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->frame_name().data(), static_cast<int>(this->frame_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "darknet.DetectRequest.frame_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->frame_name(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:darknet.DetectRequest)
}

::google::protobuf::uint8* DetectRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:darknet.DetectRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string req_id = 1;
  if (this->req_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->req_id().data(), static_cast<int>(this->req_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "darknet.DetectRequest.req_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->req_id(), target);
  }

  // string video_name = 2;
  if (this->video_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->video_name().data(), static_cast<int>(this->video_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "darknet.DetectRequest.video_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->video_name(), target);
  }

  // string frame_name = 3;
  if (this->frame_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->frame_name().data(), static_cast<int>(this->frame_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "darknet.DetectRequest.frame_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->frame_name(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:darknet.DetectRequest)
  return target;
}

size_t DetectRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:darknet.DetectRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string req_id = 1;
  if (this->req_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->req_id());
  }

  // string video_name = 2;
  if (this->video_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->video_name());
  }

  // string frame_name = 3;
  if (this->frame_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->frame_name());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DetectRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:darknet.DetectRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DetectRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DetectRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:darknet.DetectRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:darknet.DetectRequest)
    MergeFrom(*source);
  }
}

void DetectRequest::MergeFrom(const DetectRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:darknet.DetectRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.req_id().size() > 0) {

    req_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.req_id_);
  }
  if (from.video_name().size() > 0) {

    video_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.video_name_);
  }
  if (from.frame_name().size() > 0) {

    frame_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.frame_name_);
  }
}

void DetectRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:darknet.DetectRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DetectRequest::CopyFrom(const DetectRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:darknet.DetectRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DetectRequest::IsInitialized() const {
  return true;
}

void DetectRequest::Swap(DetectRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DetectRequest::InternalSwap(DetectRequest* other) {
  using std::swap;
  req_id_.Swap(&other->req_id_);
  video_name_.Swap(&other->video_name_);
  frame_name_.Swap(&other->frame_name_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DetectRequest::GetMetadata() const {
  protobuf_darknet_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_darknet_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DetectRequest

// string req_id = 1;
void DetectRequest::clear_req_id() {
  req_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DetectRequest::req_id() const {
  // @@protoc_insertion_point(field_get:darknet.DetectRequest.req_id)
  return req_id_.GetNoArena();
}
void DetectRequest::set_req_id(const ::std::string& value) {
  
  req_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:darknet.DetectRequest.req_id)
}
#if LANG_CXX11
void DetectRequest::set_req_id(::std::string&& value) {
  
  req_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:darknet.DetectRequest.req_id)
}
#endif
void DetectRequest::set_req_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  req_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:darknet.DetectRequest.req_id)
}
void DetectRequest::set_req_id(const char* value, size_t size) {
  
  req_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:darknet.DetectRequest.req_id)
}
::std::string* DetectRequest::mutable_req_id() {
  
  // @@protoc_insertion_point(field_mutable:darknet.DetectRequest.req_id)
  return req_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DetectRequest::release_req_id() {
  // @@protoc_insertion_point(field_release:darknet.DetectRequest.req_id)
  
  return req_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DetectRequest::set_allocated_req_id(::std::string* req_id) {
  if (req_id != NULL) {
    
  } else {
    
  }
  req_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), req_id);
  // @@protoc_insertion_point(field_set_allocated:darknet.DetectRequest.req_id)
}

// string video_name = 2;
void DetectRequest::clear_video_name() {
  video_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DetectRequest::video_name() const {
  // @@protoc_insertion_point(field_get:darknet.DetectRequest.video_name)
  return video_name_.GetNoArena();
}
void DetectRequest::set_video_name(const ::std::string& value) {
  
  video_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:darknet.DetectRequest.video_name)
}
#if LANG_CXX11
void DetectRequest::set_video_name(::std::string&& value) {
  
  video_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:darknet.DetectRequest.video_name)
}
#endif
void DetectRequest::set_video_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  video_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:darknet.DetectRequest.video_name)
}
void DetectRequest::set_video_name(const char* value, size_t size) {
  
  video_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:darknet.DetectRequest.video_name)
}
::std::string* DetectRequest::mutable_video_name() {
  
  // @@protoc_insertion_point(field_mutable:darknet.DetectRequest.video_name)
  return video_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DetectRequest::release_video_name() {
  // @@protoc_insertion_point(field_release:darknet.DetectRequest.video_name)
  
  return video_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DetectRequest::set_allocated_video_name(::std::string* video_name) {
  if (video_name != NULL) {
    
  } else {
    
  }
  video_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), video_name);
  // @@protoc_insertion_point(field_set_allocated:darknet.DetectRequest.video_name)
}

// string frame_name = 3;
void DetectRequest::clear_frame_name() {
  frame_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DetectRequest::frame_name() const {
  // @@protoc_insertion_point(field_get:darknet.DetectRequest.frame_name)
  return frame_name_.GetNoArena();
}
void DetectRequest::set_frame_name(const ::std::string& value) {
  
  frame_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:darknet.DetectRequest.frame_name)
}
#if LANG_CXX11
void DetectRequest::set_frame_name(::std::string&& value) {
  
  frame_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:darknet.DetectRequest.frame_name)
}
#endif
void DetectRequest::set_frame_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  frame_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:darknet.DetectRequest.frame_name)
}
void DetectRequest::set_frame_name(const char* value, size_t size) {
  
  frame_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:darknet.DetectRequest.frame_name)
}
::std::string* DetectRequest::mutable_frame_name() {
  
  // @@protoc_insertion_point(field_mutable:darknet.DetectRequest.frame_name)
  return frame_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DetectRequest::release_frame_name() {
  // @@protoc_insertion_point(field_release:darknet.DetectRequest.frame_name)
  
  return frame_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DetectRequest::set_allocated_frame_name(::std::string* frame_name) {
  if (frame_name != NULL) {
    
  } else {
    
  }
  frame_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), frame_name);
  // @@protoc_insertion_point(field_set_allocated:darknet.DetectRequest.frame_name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DetectResponse::kRspIdFieldNumber;
const int DetectResponse::kSpendTimeFieldNumber;
const int DetectResponse::kStatusFieldNumber;
const int DetectResponse::kErrFieldNumber;
const int DetectResponse::kTargetlistFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DetectResponse::DetectResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_darknet_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:darknet.DetectResponse)
}
DetectResponse::DetectResponse(const DetectResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      targetlist_(from.targetlist_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  rsp_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.rsp_id().size() > 0) {
    rsp_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rsp_id_);
  }
  err_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.err().size() > 0) {
    err_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.err_);
  }
  ::memcpy(&spend_time_, &from.spend_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&spend_time_)) + sizeof(status_));
  // @@protoc_insertion_point(copy_constructor:darknet.DetectResponse)
}

void DetectResponse::SharedCtor() {
  rsp_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  err_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&spend_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&spend_time_)) + sizeof(status_));
  _cached_size_ = 0;
}

DetectResponse::~DetectResponse() {
  // @@protoc_insertion_point(destructor:darknet.DetectResponse)
  SharedDtor();
}

void DetectResponse::SharedDtor() {
  rsp_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  err_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DetectResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DetectResponse::descriptor() {
  protobuf_darknet_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_darknet_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DetectResponse& DetectResponse::default_instance() {
  protobuf_darknet_2eproto::InitDefaults();
  return *internal_default_instance();
}

DetectResponse* DetectResponse::New(::google::protobuf::Arena* arena) const {
  DetectResponse* n = new DetectResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DetectResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:darknet.DetectResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  targetlist_.Clear();
  rsp_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  err_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&spend_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&spend_time_)) + sizeof(status_));
  _internal_metadata_.Clear();
}

bool DetectResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:darknet.DetectResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string rsp_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rsp_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->rsp_id().data(), static_cast<int>(this->rsp_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "darknet.DetectResponse.rsp_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float spend_time = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &spend_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool status = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string err = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_err()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->err().data(), static_cast<int>(this->err().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "darknet.DetectResponse.err"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .darknet.TargetRect targetlist = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_targetlist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:darknet.DetectResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:darknet.DetectResponse)
  return false;
#undef DO_
}

void DetectResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:darknet.DetectResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string rsp_id = 1;
  if (this->rsp_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->rsp_id().data(), static_cast<int>(this->rsp_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "darknet.DetectResponse.rsp_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->rsp_id(), output);
  }

  // float spend_time = 2;
  if (this->spend_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->spend_time(), output);
  }

  // bool status = 3;
  if (this->status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->status(), output);
  }

  // string err = 4;
  if (this->err().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->err().data(), static_cast<int>(this->err().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "darknet.DetectResponse.err");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->err(), output);
  }

  // repeated .darknet.TargetRect targetlist = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->targetlist_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->targetlist(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:darknet.DetectResponse)
}

::google::protobuf::uint8* DetectResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:darknet.DetectResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string rsp_id = 1;
  if (this->rsp_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->rsp_id().data(), static_cast<int>(this->rsp_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "darknet.DetectResponse.rsp_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->rsp_id(), target);
  }

  // float spend_time = 2;
  if (this->spend_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->spend_time(), target);
  }

  // bool status = 3;
  if (this->status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->status(), target);
  }

  // string err = 4;
  if (this->err().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->err().data(), static_cast<int>(this->err().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "darknet.DetectResponse.err");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->err(), target);
  }

  // repeated .darknet.TargetRect targetlist = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->targetlist_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, this->targetlist(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:darknet.DetectResponse)
  return target;
}

size_t DetectResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:darknet.DetectResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .darknet.TargetRect targetlist = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->targetlist_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->targetlist(static_cast<int>(i)));
    }
  }

  // string rsp_id = 1;
  if (this->rsp_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->rsp_id());
  }

  // string err = 4;
  if (this->err().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->err());
  }

  // float spend_time = 2;
  if (this->spend_time() != 0) {
    total_size += 1 + 4;
  }

  // bool status = 3;
  if (this->status() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DetectResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:darknet.DetectResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const DetectResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DetectResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:darknet.DetectResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:darknet.DetectResponse)
    MergeFrom(*source);
  }
}

void DetectResponse::MergeFrom(const DetectResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:darknet.DetectResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  targetlist_.MergeFrom(from.targetlist_);
  if (from.rsp_id().size() > 0) {

    rsp_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rsp_id_);
  }
  if (from.err().size() > 0) {

    err_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.err_);
  }
  if (from.spend_time() != 0) {
    set_spend_time(from.spend_time());
  }
  if (from.status() != 0) {
    set_status(from.status());
  }
}

void DetectResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:darknet.DetectResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DetectResponse::CopyFrom(const DetectResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:darknet.DetectResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DetectResponse::IsInitialized() const {
  return true;
}

void DetectResponse::Swap(DetectResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DetectResponse::InternalSwap(DetectResponse* other) {
  using std::swap;
  targetlist_.InternalSwap(&other->targetlist_);
  rsp_id_.Swap(&other->rsp_id_);
  err_.Swap(&other->err_);
  swap(spend_time_, other->spend_time_);
  swap(status_, other->status_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DetectResponse::GetMetadata() const {
  protobuf_darknet_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_darknet_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DetectResponse

// string rsp_id = 1;
void DetectResponse::clear_rsp_id() {
  rsp_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DetectResponse::rsp_id() const {
  // @@protoc_insertion_point(field_get:darknet.DetectResponse.rsp_id)
  return rsp_id_.GetNoArena();
}
void DetectResponse::set_rsp_id(const ::std::string& value) {
  
  rsp_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:darknet.DetectResponse.rsp_id)
}
#if LANG_CXX11
void DetectResponse::set_rsp_id(::std::string&& value) {
  
  rsp_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:darknet.DetectResponse.rsp_id)
}
#endif
void DetectResponse::set_rsp_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  rsp_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:darknet.DetectResponse.rsp_id)
}
void DetectResponse::set_rsp_id(const char* value, size_t size) {
  
  rsp_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:darknet.DetectResponse.rsp_id)
}
::std::string* DetectResponse::mutable_rsp_id() {
  
  // @@protoc_insertion_point(field_mutable:darknet.DetectResponse.rsp_id)
  return rsp_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DetectResponse::release_rsp_id() {
  // @@protoc_insertion_point(field_release:darknet.DetectResponse.rsp_id)
  
  return rsp_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DetectResponse::set_allocated_rsp_id(::std::string* rsp_id) {
  if (rsp_id != NULL) {
    
  } else {
    
  }
  rsp_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), rsp_id);
  // @@protoc_insertion_point(field_set_allocated:darknet.DetectResponse.rsp_id)
}

// float spend_time = 2;
void DetectResponse::clear_spend_time() {
  spend_time_ = 0;
}
float DetectResponse::spend_time() const {
  // @@protoc_insertion_point(field_get:darknet.DetectResponse.spend_time)
  return spend_time_;
}
void DetectResponse::set_spend_time(float value) {
  
  spend_time_ = value;
  // @@protoc_insertion_point(field_set:darknet.DetectResponse.spend_time)
}

// bool status = 3;
void DetectResponse::clear_status() {
  status_ = false;
}
bool DetectResponse::status() const {
  // @@protoc_insertion_point(field_get:darknet.DetectResponse.status)
  return status_;
}
void DetectResponse::set_status(bool value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:darknet.DetectResponse.status)
}

// string err = 4;
void DetectResponse::clear_err() {
  err_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DetectResponse::err() const {
  // @@protoc_insertion_point(field_get:darknet.DetectResponse.err)
  return err_.GetNoArena();
}
void DetectResponse::set_err(const ::std::string& value) {
  
  err_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:darknet.DetectResponse.err)
}
#if LANG_CXX11
void DetectResponse::set_err(::std::string&& value) {
  
  err_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:darknet.DetectResponse.err)
}
#endif
void DetectResponse::set_err(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  err_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:darknet.DetectResponse.err)
}
void DetectResponse::set_err(const char* value, size_t size) {
  
  err_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:darknet.DetectResponse.err)
}
::std::string* DetectResponse::mutable_err() {
  
  // @@protoc_insertion_point(field_mutable:darknet.DetectResponse.err)
  return err_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DetectResponse::release_err() {
  // @@protoc_insertion_point(field_release:darknet.DetectResponse.err)
  
  return err_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DetectResponse::set_allocated_err(::std::string* err) {
  if (err != NULL) {
    
  } else {
    
  }
  err_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), err);
  // @@protoc_insertion_point(field_set_allocated:darknet.DetectResponse.err)
}

// repeated .darknet.TargetRect targetlist = 5;
int DetectResponse::targetlist_size() const {
  return targetlist_.size();
}
void DetectResponse::clear_targetlist() {
  targetlist_.Clear();
}
const ::darknet::TargetRect& DetectResponse::targetlist(int index) const {
  // @@protoc_insertion_point(field_get:darknet.DetectResponse.targetlist)
  return targetlist_.Get(index);
}
::darknet::TargetRect* DetectResponse::mutable_targetlist(int index) {
  // @@protoc_insertion_point(field_mutable:darknet.DetectResponse.targetlist)
  return targetlist_.Mutable(index);
}
::darknet::TargetRect* DetectResponse::add_targetlist() {
  // @@protoc_insertion_point(field_add:darknet.DetectResponse.targetlist)
  return targetlist_.Add();
}
::google::protobuf::RepeatedPtrField< ::darknet::TargetRect >*
DetectResponse::mutable_targetlist() {
  // @@protoc_insertion_point(field_mutable_list:darknet.DetectResponse.targetlist)
  return &targetlist_;
}
const ::google::protobuf::RepeatedPtrField< ::darknet::TargetRect >&
DetectResponse::targetlist() const {
  // @@protoc_insertion_point(field_list:darknet.DetectResponse.targetlist)
  return targetlist_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace darknet

// @@protoc_insertion_point(global_scope)
