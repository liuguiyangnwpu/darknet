// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: darknet.proto

#ifndef PROTOBUF_darknet_2eproto__INCLUDED
#define PROTOBUF_darknet_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace darknet {
class DetectRequest;
class DetectRequestDefaultTypeInternal;
extern DetectRequestDefaultTypeInternal _DetectRequest_default_instance_;
class DetectResponse;
class DetectResponseDefaultTypeInternal;
extern DetectResponseDefaultTypeInternal _DetectResponse_default_instance_;
class TargetRect;
class TargetRectDefaultTypeInternal;
extern TargetRectDefaultTypeInternal _TargetRect_default_instance_;
}  // namespace darknet

namespace darknet {

namespace protobuf_darknet_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_darknet_2eproto

// ===================================================================

class TargetRect : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:darknet.TargetRect) */ {
 public:
  TargetRect();
  virtual ~TargetRect();

  TargetRect(const TargetRect& from);

  inline TargetRect& operator=(const TargetRect& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TargetRect(TargetRect&& from) noexcept
    : TargetRect() {
    *this = ::std::move(from);
  }

  inline TargetRect& operator=(TargetRect&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TargetRect& default_instance();

  static inline const TargetRect* internal_default_instance() {
    return reinterpret_cast<const TargetRect*>(
               &_TargetRect_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(TargetRect* other);
  friend void swap(TargetRect& a, TargetRect& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TargetRect* New() const PROTOBUF_FINAL { return New(NULL); }

  TargetRect* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TargetRect& from);
  void MergeFrom(const TargetRect& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TargetRect* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string label = 5;
  void clear_label();
  static const int kLabelFieldNumber = 5;
  const ::std::string& label() const;
  void set_label(const ::std::string& value);
  #if LANG_CXX11
  void set_label(::std::string&& value);
  #endif
  void set_label(const char* value);
  void set_label(const char* value, size_t size);
  ::std::string* mutable_label();
  ::std::string* release_label();
  void set_allocated_label(::std::string* label);

  // int32 x_min = 1;
  void clear_x_min();
  static const int kXMinFieldNumber = 1;
  ::google::protobuf::int32 x_min() const;
  void set_x_min(::google::protobuf::int32 value);

  // int32 y_min = 2;
  void clear_y_min();
  static const int kYMinFieldNumber = 2;
  ::google::protobuf::int32 y_min() const;
  void set_y_min(::google::protobuf::int32 value);

  // int32 x_max = 3;
  void clear_x_max();
  static const int kXMaxFieldNumber = 3;
  ::google::protobuf::int32 x_max() const;
  void set_x_max(::google::protobuf::int32 value);

  // int32 y_max = 4;
  void clear_y_max();
  static const int kYMaxFieldNumber = 4;
  ::google::protobuf::int32 y_max() const;
  void set_y_max(::google::protobuf::int32 value);

  // float prob = 6;
  void clear_prob();
  static const int kProbFieldNumber = 6;
  float prob() const;
  void set_prob(float value);

  // @@protoc_insertion_point(class_scope:darknet.TargetRect)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr label_;
  ::google::protobuf::int32 x_min_;
  ::google::protobuf::int32 y_min_;
  ::google::protobuf::int32 x_max_;
  ::google::protobuf::int32 y_max_;
  float prob_;
  mutable int _cached_size_;
  friend struct protobuf_darknet_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DetectRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:darknet.DetectRequest) */ {
 public:
  DetectRequest();
  virtual ~DetectRequest();

  DetectRequest(const DetectRequest& from);

  inline DetectRequest& operator=(const DetectRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DetectRequest(DetectRequest&& from) noexcept
    : DetectRequest() {
    *this = ::std::move(from);
  }

  inline DetectRequest& operator=(DetectRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DetectRequest& default_instance();

  static inline const DetectRequest* internal_default_instance() {
    return reinterpret_cast<const DetectRequest*>(
               &_DetectRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(DetectRequest* other);
  friend void swap(DetectRequest& a, DetectRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DetectRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  DetectRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DetectRequest& from);
  void MergeFrom(const DetectRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DetectRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string req_id = 1;
  void clear_req_id();
  static const int kReqIdFieldNumber = 1;
  const ::std::string& req_id() const;
  void set_req_id(const ::std::string& value);
  #if LANG_CXX11
  void set_req_id(::std::string&& value);
  #endif
  void set_req_id(const char* value);
  void set_req_id(const char* value, size_t size);
  ::std::string* mutable_req_id();
  ::std::string* release_req_id();
  void set_allocated_req_id(::std::string* req_id);

  // string video_name = 2;
  void clear_video_name();
  static const int kVideoNameFieldNumber = 2;
  const ::std::string& video_name() const;
  void set_video_name(const ::std::string& value);
  #if LANG_CXX11
  void set_video_name(::std::string&& value);
  #endif
  void set_video_name(const char* value);
  void set_video_name(const char* value, size_t size);
  ::std::string* mutable_video_name();
  ::std::string* release_video_name();
  void set_allocated_video_name(::std::string* video_name);

  // string frame_name = 3;
  void clear_frame_name();
  static const int kFrameNameFieldNumber = 3;
  const ::std::string& frame_name() const;
  void set_frame_name(const ::std::string& value);
  #if LANG_CXX11
  void set_frame_name(::std::string&& value);
  #endif
  void set_frame_name(const char* value);
  void set_frame_name(const char* value, size_t size);
  ::std::string* mutable_frame_name();
  ::std::string* release_frame_name();
  void set_allocated_frame_name(::std::string* frame_name);

  // @@protoc_insertion_point(class_scope:darknet.DetectRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr req_id_;
  ::google::protobuf::internal::ArenaStringPtr video_name_;
  ::google::protobuf::internal::ArenaStringPtr frame_name_;
  mutable int _cached_size_;
  friend struct protobuf_darknet_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DetectResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:darknet.DetectResponse) */ {
 public:
  DetectResponse();
  virtual ~DetectResponse();

  DetectResponse(const DetectResponse& from);

  inline DetectResponse& operator=(const DetectResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DetectResponse(DetectResponse&& from) noexcept
    : DetectResponse() {
    *this = ::std::move(from);
  }

  inline DetectResponse& operator=(DetectResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DetectResponse& default_instance();

  static inline const DetectResponse* internal_default_instance() {
    return reinterpret_cast<const DetectResponse*>(
               &_DetectResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(DetectResponse* other);
  friend void swap(DetectResponse& a, DetectResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DetectResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  DetectResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DetectResponse& from);
  void MergeFrom(const DetectResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DetectResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .darknet.TargetRect targetlist = 5;
  int targetlist_size() const;
  void clear_targetlist();
  static const int kTargetlistFieldNumber = 5;
  const ::darknet::TargetRect& targetlist(int index) const;
  ::darknet::TargetRect* mutable_targetlist(int index);
  ::darknet::TargetRect* add_targetlist();
  ::google::protobuf::RepeatedPtrField< ::darknet::TargetRect >*
      mutable_targetlist();
  const ::google::protobuf::RepeatedPtrField< ::darknet::TargetRect >&
      targetlist() const;

  // string rsp_id = 1;
  void clear_rsp_id();
  static const int kRspIdFieldNumber = 1;
  const ::std::string& rsp_id() const;
  void set_rsp_id(const ::std::string& value);
  #if LANG_CXX11
  void set_rsp_id(::std::string&& value);
  #endif
  void set_rsp_id(const char* value);
  void set_rsp_id(const char* value, size_t size);
  ::std::string* mutable_rsp_id();
  ::std::string* release_rsp_id();
  void set_allocated_rsp_id(::std::string* rsp_id);

  // string err = 4;
  void clear_err();
  static const int kErrFieldNumber = 4;
  const ::std::string& err() const;
  void set_err(const ::std::string& value);
  #if LANG_CXX11
  void set_err(::std::string&& value);
  #endif
  void set_err(const char* value);
  void set_err(const char* value, size_t size);
  ::std::string* mutable_err();
  ::std::string* release_err();
  void set_allocated_err(::std::string* err);

  // float spend_time = 2;
  void clear_spend_time();
  static const int kSpendTimeFieldNumber = 2;
  float spend_time() const;
  void set_spend_time(float value);

  // bool status = 3;
  void clear_status();
  static const int kStatusFieldNumber = 3;
  bool status() const;
  void set_status(bool value);

  // @@protoc_insertion_point(class_scope:darknet.DetectResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::darknet::TargetRect > targetlist_;
  ::google::protobuf::internal::ArenaStringPtr rsp_id_;
  ::google::protobuf::internal::ArenaStringPtr err_;
  float spend_time_;
  bool status_;
  mutable int _cached_size_;
  friend struct protobuf_darknet_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TargetRect

// int32 x_min = 1;
inline void TargetRect::clear_x_min() {
  x_min_ = 0;
}
inline ::google::protobuf::int32 TargetRect::x_min() const {
  // @@protoc_insertion_point(field_get:darknet.TargetRect.x_min)
  return x_min_;
}
inline void TargetRect::set_x_min(::google::protobuf::int32 value) {
  
  x_min_ = value;
  // @@protoc_insertion_point(field_set:darknet.TargetRect.x_min)
}

// int32 y_min = 2;
inline void TargetRect::clear_y_min() {
  y_min_ = 0;
}
inline ::google::protobuf::int32 TargetRect::y_min() const {
  // @@protoc_insertion_point(field_get:darknet.TargetRect.y_min)
  return y_min_;
}
inline void TargetRect::set_y_min(::google::protobuf::int32 value) {
  
  y_min_ = value;
  // @@protoc_insertion_point(field_set:darknet.TargetRect.y_min)
}

// int32 x_max = 3;
inline void TargetRect::clear_x_max() {
  x_max_ = 0;
}
inline ::google::protobuf::int32 TargetRect::x_max() const {
  // @@protoc_insertion_point(field_get:darknet.TargetRect.x_max)
  return x_max_;
}
inline void TargetRect::set_x_max(::google::protobuf::int32 value) {
  
  x_max_ = value;
  // @@protoc_insertion_point(field_set:darknet.TargetRect.x_max)
}

// int32 y_max = 4;
inline void TargetRect::clear_y_max() {
  y_max_ = 0;
}
inline ::google::protobuf::int32 TargetRect::y_max() const {
  // @@protoc_insertion_point(field_get:darknet.TargetRect.y_max)
  return y_max_;
}
inline void TargetRect::set_y_max(::google::protobuf::int32 value) {
  
  y_max_ = value;
  // @@protoc_insertion_point(field_set:darknet.TargetRect.y_max)
}

// string label = 5;
inline void TargetRect::clear_label() {
  label_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TargetRect::label() const {
  // @@protoc_insertion_point(field_get:darknet.TargetRect.label)
  return label_.GetNoArena();
}
inline void TargetRect::set_label(const ::std::string& value) {
  
  label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:darknet.TargetRect.label)
}
#if LANG_CXX11
inline void TargetRect::set_label(::std::string&& value) {
  
  label_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:darknet.TargetRect.label)
}
#endif
inline void TargetRect::set_label(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:darknet.TargetRect.label)
}
inline void TargetRect::set_label(const char* value, size_t size) {
  
  label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:darknet.TargetRect.label)
}
inline ::std::string* TargetRect::mutable_label() {
  
  // @@protoc_insertion_point(field_mutable:darknet.TargetRect.label)
  return label_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TargetRect::release_label() {
  // @@protoc_insertion_point(field_release:darknet.TargetRect.label)
  
  return label_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TargetRect::set_allocated_label(::std::string* label) {
  if (label != NULL) {
    
  } else {
    
  }
  label_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), label);
  // @@protoc_insertion_point(field_set_allocated:darknet.TargetRect.label)
}

// float prob = 6;
inline void TargetRect::clear_prob() {
  prob_ = 0;
}
inline float TargetRect::prob() const {
  // @@protoc_insertion_point(field_get:darknet.TargetRect.prob)
  return prob_;
}
inline void TargetRect::set_prob(float value) {
  
  prob_ = value;
  // @@protoc_insertion_point(field_set:darknet.TargetRect.prob)
}

// -------------------------------------------------------------------

// DetectRequest

// string req_id = 1;
inline void DetectRequest::clear_req_id() {
  req_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DetectRequest::req_id() const {
  // @@protoc_insertion_point(field_get:darknet.DetectRequest.req_id)
  return req_id_.GetNoArena();
}
inline void DetectRequest::set_req_id(const ::std::string& value) {
  
  req_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:darknet.DetectRequest.req_id)
}
#if LANG_CXX11
inline void DetectRequest::set_req_id(::std::string&& value) {
  
  req_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:darknet.DetectRequest.req_id)
}
#endif
inline void DetectRequest::set_req_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  req_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:darknet.DetectRequest.req_id)
}
inline void DetectRequest::set_req_id(const char* value, size_t size) {
  
  req_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:darknet.DetectRequest.req_id)
}
inline ::std::string* DetectRequest::mutable_req_id() {
  
  // @@protoc_insertion_point(field_mutable:darknet.DetectRequest.req_id)
  return req_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DetectRequest::release_req_id() {
  // @@protoc_insertion_point(field_release:darknet.DetectRequest.req_id)
  
  return req_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DetectRequest::set_allocated_req_id(::std::string* req_id) {
  if (req_id != NULL) {
    
  } else {
    
  }
  req_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), req_id);
  // @@protoc_insertion_point(field_set_allocated:darknet.DetectRequest.req_id)
}

// string video_name = 2;
inline void DetectRequest::clear_video_name() {
  video_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DetectRequest::video_name() const {
  // @@protoc_insertion_point(field_get:darknet.DetectRequest.video_name)
  return video_name_.GetNoArena();
}
inline void DetectRequest::set_video_name(const ::std::string& value) {
  
  video_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:darknet.DetectRequest.video_name)
}
#if LANG_CXX11
inline void DetectRequest::set_video_name(::std::string&& value) {
  
  video_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:darknet.DetectRequest.video_name)
}
#endif
inline void DetectRequest::set_video_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  video_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:darknet.DetectRequest.video_name)
}
inline void DetectRequest::set_video_name(const char* value, size_t size) {
  
  video_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:darknet.DetectRequest.video_name)
}
inline ::std::string* DetectRequest::mutable_video_name() {
  
  // @@protoc_insertion_point(field_mutable:darknet.DetectRequest.video_name)
  return video_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DetectRequest::release_video_name() {
  // @@protoc_insertion_point(field_release:darknet.DetectRequest.video_name)
  
  return video_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DetectRequest::set_allocated_video_name(::std::string* video_name) {
  if (video_name != NULL) {
    
  } else {
    
  }
  video_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), video_name);
  // @@protoc_insertion_point(field_set_allocated:darknet.DetectRequest.video_name)
}

// string frame_name = 3;
inline void DetectRequest::clear_frame_name() {
  frame_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DetectRequest::frame_name() const {
  // @@protoc_insertion_point(field_get:darknet.DetectRequest.frame_name)
  return frame_name_.GetNoArena();
}
inline void DetectRequest::set_frame_name(const ::std::string& value) {
  
  frame_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:darknet.DetectRequest.frame_name)
}
#if LANG_CXX11
inline void DetectRequest::set_frame_name(::std::string&& value) {
  
  frame_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:darknet.DetectRequest.frame_name)
}
#endif
inline void DetectRequest::set_frame_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  frame_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:darknet.DetectRequest.frame_name)
}
inline void DetectRequest::set_frame_name(const char* value, size_t size) {
  
  frame_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:darknet.DetectRequest.frame_name)
}
inline ::std::string* DetectRequest::mutable_frame_name() {
  
  // @@protoc_insertion_point(field_mutable:darknet.DetectRequest.frame_name)
  return frame_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DetectRequest::release_frame_name() {
  // @@protoc_insertion_point(field_release:darknet.DetectRequest.frame_name)
  
  return frame_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DetectRequest::set_allocated_frame_name(::std::string* frame_name) {
  if (frame_name != NULL) {
    
  } else {
    
  }
  frame_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), frame_name);
  // @@protoc_insertion_point(field_set_allocated:darknet.DetectRequest.frame_name)
}

// -------------------------------------------------------------------

// DetectResponse

// string rsp_id = 1;
inline void DetectResponse::clear_rsp_id() {
  rsp_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DetectResponse::rsp_id() const {
  // @@protoc_insertion_point(field_get:darknet.DetectResponse.rsp_id)
  return rsp_id_.GetNoArena();
}
inline void DetectResponse::set_rsp_id(const ::std::string& value) {
  
  rsp_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:darknet.DetectResponse.rsp_id)
}
#if LANG_CXX11
inline void DetectResponse::set_rsp_id(::std::string&& value) {
  
  rsp_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:darknet.DetectResponse.rsp_id)
}
#endif
inline void DetectResponse::set_rsp_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  rsp_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:darknet.DetectResponse.rsp_id)
}
inline void DetectResponse::set_rsp_id(const char* value, size_t size) {
  
  rsp_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:darknet.DetectResponse.rsp_id)
}
inline ::std::string* DetectResponse::mutable_rsp_id() {
  
  // @@protoc_insertion_point(field_mutable:darknet.DetectResponse.rsp_id)
  return rsp_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DetectResponse::release_rsp_id() {
  // @@protoc_insertion_point(field_release:darknet.DetectResponse.rsp_id)
  
  return rsp_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DetectResponse::set_allocated_rsp_id(::std::string* rsp_id) {
  if (rsp_id != NULL) {
    
  } else {
    
  }
  rsp_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), rsp_id);
  // @@protoc_insertion_point(field_set_allocated:darknet.DetectResponse.rsp_id)
}

// float spend_time = 2;
inline void DetectResponse::clear_spend_time() {
  spend_time_ = 0;
}
inline float DetectResponse::spend_time() const {
  // @@protoc_insertion_point(field_get:darknet.DetectResponse.spend_time)
  return spend_time_;
}
inline void DetectResponse::set_spend_time(float value) {
  
  spend_time_ = value;
  // @@protoc_insertion_point(field_set:darknet.DetectResponse.spend_time)
}

// bool status = 3;
inline void DetectResponse::clear_status() {
  status_ = false;
}
inline bool DetectResponse::status() const {
  // @@protoc_insertion_point(field_get:darknet.DetectResponse.status)
  return status_;
}
inline void DetectResponse::set_status(bool value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:darknet.DetectResponse.status)
}

// string err = 4;
inline void DetectResponse::clear_err() {
  err_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DetectResponse::err() const {
  // @@protoc_insertion_point(field_get:darknet.DetectResponse.err)
  return err_.GetNoArena();
}
inline void DetectResponse::set_err(const ::std::string& value) {
  
  err_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:darknet.DetectResponse.err)
}
#if LANG_CXX11
inline void DetectResponse::set_err(::std::string&& value) {
  
  err_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:darknet.DetectResponse.err)
}
#endif
inline void DetectResponse::set_err(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  err_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:darknet.DetectResponse.err)
}
inline void DetectResponse::set_err(const char* value, size_t size) {
  
  err_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:darknet.DetectResponse.err)
}
inline ::std::string* DetectResponse::mutable_err() {
  
  // @@protoc_insertion_point(field_mutable:darknet.DetectResponse.err)
  return err_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DetectResponse::release_err() {
  // @@protoc_insertion_point(field_release:darknet.DetectResponse.err)
  
  return err_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DetectResponse::set_allocated_err(::std::string* err) {
  if (err != NULL) {
    
  } else {
    
  }
  err_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), err);
  // @@protoc_insertion_point(field_set_allocated:darknet.DetectResponse.err)
}

// repeated .darknet.TargetRect targetlist = 5;
inline int DetectResponse::targetlist_size() const {
  return targetlist_.size();
}
inline void DetectResponse::clear_targetlist() {
  targetlist_.Clear();
}
inline const ::darknet::TargetRect& DetectResponse::targetlist(int index) const {
  // @@protoc_insertion_point(field_get:darknet.DetectResponse.targetlist)
  return targetlist_.Get(index);
}
inline ::darknet::TargetRect* DetectResponse::mutable_targetlist(int index) {
  // @@protoc_insertion_point(field_mutable:darknet.DetectResponse.targetlist)
  return targetlist_.Mutable(index);
}
inline ::darknet::TargetRect* DetectResponse::add_targetlist() {
  // @@protoc_insertion_point(field_add:darknet.DetectResponse.targetlist)
  return targetlist_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::darknet::TargetRect >*
DetectResponse::mutable_targetlist() {
  // @@protoc_insertion_point(field_mutable_list:darknet.DetectResponse.targetlist)
  return &targetlist_;
}
inline const ::google::protobuf::RepeatedPtrField< ::darknet::TargetRect >&
DetectResponse::targetlist() const {
  // @@protoc_insertion_point(field_list:darknet.DetectResponse.targetlist)
  return targetlist_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace darknet

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_darknet_2eproto__INCLUDED
